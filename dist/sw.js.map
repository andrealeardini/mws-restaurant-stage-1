{"version":3,"sources":["sw.js"],"names":["CACHE_NAME","urlsToCache","self","event","console","addEventListener","Promise","cacheNames","waitUntil","caches","open","then","cache","log","addAll","cacheWhitelist","option","keys","all","map","cacheName","respondWith","request","delete","requestUrl","URL","url","origin","location","ignoreSearch","search","startsWith","match","response","fetch"],"mappings":"aAAA,IAAMA,WAAa,0BACbC,YAAc,CADdD,IACAC,mBAGF,aAcJC,kBACI,aACAC,aAGQC,aACA,aACH,aAPT,aANI,aAiBJF,aAfI,aAiBA,eAIQA,KAAAG,iBAAOC,UACHC,SAAeJ,GAEPA,EAAAK,UACHC,OAAAC,KAAAV,YAHLW,KADJ,SAAAC,GANZ,OAIIR,QAAAS,IAAA,gBAJJD,EAAAE,OAAAb,kBAoBQC,KAAAG,iBAAa,WAAA,SAAAF,GAAA,IAAbY,EAAA,CAAAf,YAIIgB,EAAAA,UACIP,OAAAQ,OAAAN,KAAA,SAAgBJ,GADX,OAATD,QAAAY,IAGHX,EAAAY,IAAA,SAAAC,GACKC,IAEDV,IAFCU,EACWlB,QAAMmB,GAEf,OAAAb,OAAAc,OAAAH,WAdhBlB,KAAKG,iBAAiB,QAAS,SAAUF,GACrC,IAAMqB,EAAa,IAAIC,IAAItB,EAAMmB,QAAQI,KACzC,GAAIF,EAAWG,SAAWC,SAASD,OAAQ,CACvC,IAAIX,EAAS,CACTa,cAAgB,GAEhBL,EAAWM,OAAOC,WAAW,UAC7Bf,EAAS,CACLa,cAAgB,IAGxB1B,EAAMkB,YACFZ,OAAOuB,MAAM7B,EAAMmB,QAASN,GAC3BL,KAAK,SAAUsB,GAEZ,OAAIA,GAGGC,MAAM/B,EAAMmB","file":"sw.js","sourcesContent":["const CACHE_NAME = 'MWS-restaurant-cache-v1';\r\nconst urlsToCache = [\r\n    '/',\r\n    '/restaurant.html',\r\n    '/js/all.js',\r\n    '/css/styles.css',\r\n    '/img/1.jpg',\r\n    '/img/2.jpg',\r\n    '/img/3.jpg',\r\n    '/img/4.jpg',\r\n    '/img/5.jpg',\r\n    '/img/6.jpg',\r\n    '/img/7.jpg',\r\n    '/img/8.jpg',\r\n    '/img/9.jpg',\r\n    '/img/10.jpg'\r\n];\r\n\r\nself.addEventListener('install', function (event) {\r\n    // Perform install steps\r\n    event.waitUntil(\r\n        caches.open(CACHE_NAME)\r\n        .then(function (cache) {\r\n            console.log('Opened cache');\r\n            return cache.addAll(urlsToCache);\r\n        })\r\n    );\r\n});\r\n\r\nself.addEventListener('activate', function (event) {\r\n\r\n    const cacheWhitelist = [CACHE_NAME];\r\n\r\n    event.waitUntil(\r\n        caches.keys().then(function (cacheNames) {\r\n            return Promise.all(\r\n                cacheNames.map(function (cacheName) {\r\n                    if (cacheWhitelist.indexOf(cacheName) === -1) {\r\n                        return caches.delete(cacheName);\r\n                    }\r\n                })\r\n            );\r\n        })\r\n    );\r\n})\r\n\r\nself.addEventListener('fetch', function (event) {\r\n    const requestUrl = new URL(event.request.url);\r\n    if (requestUrl.origin === location.origin) {\r\n        let option = {\r\n            'ignoreSearch': false\r\n        };\r\n        if (requestUrl.search.startsWith(\"?id=\")) {\r\n            option = {\r\n                'ignoreSearch': true\r\n            };\r\n        };\r\n        event.respondWith(\r\n            caches.match(event.request, option)\r\n            .then(function (response) {\r\n                // Cache hit - return response\r\n                if (response) {\r\n                    return response;\r\n                }\r\n                return fetch(event.request);\r\n            })\r\n        );\r\n    };\r\n});"]}