{"version":3,"sources":["sw.js"],"names":["CACHE_NAME","urlsToCache","self","addEventListener","event","waitUntil","caches","open","then","cache","console","log","addAll","cacheWhitelist","keys","cacheNames","Promise","all","map","cacheName","indexOf","delete","requestUrl","URL","request","url","origin","location","option","ignoreSearch","search","startsWith","respondWith","match","response","fetch"],"mappings":"AAAA,MAAMA,WAAa,0BACbC,aACF,IACA,mBACA,aACA,kBACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,eAGJC,KAAKC,iBAAiB,UAAW,SAAUC,GAEvCA,EAAMC,UACFC,OAAOC,KAAKP,YACXQ,KAAK,SAAUC,GAEZ,OADAC,QAAQC,IAAI,gBACLF,EAAMG,OAAOX,kBAKhCC,KAAKC,iBAAiB,WAAY,SAAUC,GAExC,MAAMS,GAAkBb,YAExBI,EAAMC,UACFC,OAAOQ,OAAON,KAAK,SAAUO,GACzB,OAAOC,QAAQC,IACXF,EAAWG,IAAI,SAAUC,GACrB,IAA2C,IAAvCN,EAAeO,QAAQD,GACvB,OAAOb,OAAOe,OAAOF,WAQ7CjB,KAAKC,iBAAiB,QAAS,SAAUC,GACrC,MAAMkB,EAAa,IAAIC,IAAInB,EAAMoB,QAAQC,KACzC,GAAIH,EAAWI,SAAWC,SAASD,OAAQ,CACvC,IAAIE,GACAC,cAAgB,GAEhBP,EAAWQ,OAAOC,WAAW,UAC7BH,GACIC,cAAgB,IAGxBzB,EAAM4B,YACF1B,OAAO2B,MAAM7B,EAAMoB,QAASI,GAC3BpB,KAAK,SAAU0B,GAEZ,OAAIA,GAGGC,MAAM/B,EAAMoB","file":"sw.js","sourcesContent":["const CACHE_NAME = 'MWS-restaurant-cache-v1';\r\nconst urlsToCache = [\r\n    '/',\r\n    '/restaurant.html',\r\n    '/js/all.js',\r\n    '/css/styles.css',\r\n    '/img/1.jpg',\r\n    '/img/2.jpg',\r\n    '/img/3.jpg',\r\n    '/img/4.jpg',\r\n    '/img/5.jpg',\r\n    '/img/6.jpg',\r\n    '/img/7.jpg',\r\n    '/img/8.jpg',\r\n    '/img/9.jpg',\r\n    '/img/10.jpg'\r\n];\r\n\r\nself.addEventListener('install', function (event) {\r\n    // Perform install steps\r\n    event.waitUntil(\r\n        caches.open(CACHE_NAME)\r\n        .then(function (cache) {\r\n            console.log('Opened cache');\r\n            return cache.addAll(urlsToCache);\r\n        })\r\n    );\r\n});\r\n\r\nself.addEventListener('activate', function (event) {\r\n\r\n    const cacheWhitelist = [CACHE_NAME];\r\n\r\n    event.waitUntil(\r\n        caches.keys().then(function (cacheNames) {\r\n            return Promise.all(\r\n                cacheNames.map(function (cacheName) {\r\n                    if (cacheWhitelist.indexOf(cacheName) === -1) {\r\n                        return caches.delete(cacheName);\r\n                    }\r\n                })\r\n            );\r\n        })\r\n    );\r\n})\r\n\r\nself.addEventListener('fetch', function (event) {\r\n    const requestUrl = new URL(event.request.url);\r\n    if (requestUrl.origin === location.origin) {\r\n        let option = {\r\n            'ignoreSearch': false\r\n        };\r\n        if (requestUrl.search.startsWith(\"?id=\")) {\r\n            option = {\r\n                'ignoreSearch': true\r\n            };\r\n        };\r\n        event.respondWith(\r\n            caches.match(event.request, option)\r\n            .then(function (response) {\r\n                // Cache hit - return response\r\n                if (response) {\r\n                    return response;\r\n                }\r\n                return fetch(event.request);\r\n            })\r\n        );\r\n    };\r\n});"]}