{"version":3,"sources":["main.js"],"names":["restaurants","neighborhoods","cuisines","map","google","markers","navigator","window","addEventListener","serviceWorker","register","then","registration","console","log","scope","err","document","event","fetchNeighborhoods","fetchCuisines","DBHelper","error","self","fillNeighborhoodsHTML","select","getElementById","forEach","neighborhood","option","createElement","innerHTML","value","append","fillCuisinesHTML","cuisine","initMap","maps","Map","zoom","center","lat","lng","scrollwheel","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","m","setMap","ul","restaurant","createRestaurantHTML","addMarkersToMap","li","image","className","alt","imageDescriptionForRestaurant","src","imageUrlForRestaurant","name","address","more","location","href","urlForRestaurant","marker","mapMarkerForRestaurant","addListener","url","push"],"mappings":"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","file":"main.js","sourcesContent":["let restaurants,\r\n    neighborhoods,\r\n    cuisines\r\nvar map\r\nvar markers = []\r\nvar google\r\n\r\n/**\r\n * checks to see if the service worker API is available, and if it is, the service worker at /sw.js is registered\r\n */\r\nif ('serviceWorker' in navigator) {\r\n    window.addEventListener('load', function () {\r\n        navigator.serviceWorker.register('/sw.js').then(function (registration) {\r\n            // Registration was successful\r\n            console.log('ServiceWorker registration successful with scope: ', registration.scope);\r\n        }, function (err) {\r\n            // registration failed :(\r\n            console.log('ServiceWorker registration failed: ', err);\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n    fetchNeighborhoods();\r\n    fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n    DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n        if (error) { // Got an error\r\n            console.error(error);\r\n        } else {\r\n            self.neighborhoods = neighborhoods;\r\n            fillNeighborhoodsHTML();\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n    const select = document.getElementById('neighborhoods-select');\r\n    neighborhoods.forEach(neighborhood => {\r\n        const option = document.createElement('option');\r\n        option.innerHTML = neighborhood;\r\n        option.value = neighborhood;\r\n        select.append(option);\r\n    });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n    DBHelper.fetchCuisines((error, cuisines) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            self.cuisines = cuisines;\r\n            fillCuisinesHTML();\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n    const select = document.getElementById('cuisines-select');\r\n\r\n    cuisines.forEach(cuisine => {\r\n        const option = document.createElement('option');\r\n        option.innerHTML = cuisine;\r\n        option.value = cuisine;\r\n        select.append(option);\r\n    });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n    let loc = {\r\n        lat: 40.722216,\r\n        lng: -73.987501\r\n    };\r\n    self.map = new google.maps.Map(document.getElementById('map'), {\r\n        zoom: 12,\r\n        center: loc,\r\n        scrollwheel: false\r\n    });\r\n    updateRestaurants();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n    const cSelect = document.getElementById('cuisines-select');\r\n    const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n    const cIndex = cSelect.selectedIndex;\r\n    const nIndex = nSelect.selectedIndex;\r\n\r\n    const cuisine = cSelect[cIndex].value;\r\n    const neighborhood = nSelect[nIndex].value;\r\n\r\n    DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            resetRestaurants(restaurants);\r\n            fillRestaurantsHTML();\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n    // Remove all restaurants\r\n    self.restaurants = [];\r\n    const ul = document.getElementById('restaurants-list');\r\n    ul.innerHTML = '';\r\n\r\n    // Remove all map markers\r\n    self.markers.forEach(m => m.setMap(null));\r\n    self.markers = [];\r\n    self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n    const ul = document.getElementById('restaurants-list');\r\n    restaurants.forEach(restaurant => {\r\n        ul.append(createRestaurantHTML(restaurant));\r\n    });\r\n    addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n\r\n    const li = document.createElement('li');\r\n\r\n    const image = document.createElement('img');\r\n    image.className = 'restaurant-img';\r\n    image.alt = DBHelper.imageDescriptionForRestaurant(restaurant);\r\n    image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n    li.append(image);\r\n\r\n    const name = document.createElement('h1');\r\n    name.innerHTML = restaurant.name;\r\n    li.append(name);\r\n\r\n    const neighborhood = document.createElement('p');\r\n    neighborhood.innerHTML = restaurant.neighborhood;\r\n    li.append(neighborhood);\r\n\r\n    const address = document.createElement('p');\r\n    address.innerHTML = restaurant.address;\r\n    li.append(address);\r\n\r\n    const more = document.createElement('button');\r\n    more.innerHTML = 'View Details';\r\n    more.addEventListener(\"click\", function () {\r\n        window.location.href = DBHelper.urlForRestaurant(restaurant);\r\n    });\r\n    li.append(more)\r\n\r\n    return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n    restaurants.forEach(restaurant => {\r\n        // Add marker to the map\r\n        const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n        google.maps.event.addListener(marker, 'click', () => {\r\n            window.location.href = marker.url\r\n        });\r\n        self.markers.push(marker);\r\n    });\r\n}"]}