{"version":3,"sources":["main.js"],"names":["restaurants","neighborhoods","cuisines","map","google","markers","navigator","window","addEventListener","serviceWorker","register","then","registration","console","log","scope","err","fetchNeighborhoods","DBHelper","error","self","fillNeighborhoodsHTML","select","document","getElementById","forEach","neighborhood","option","createElement","innerHTML","value","append","fetchCuisines","fillCuisinesHTML","cuisine","initMap","maps","Map","zoom","center","lat","lng","scrollwheel","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","m","setMap","ul","restaurant","createRestaurantHTML","addMarkersToMap","li","picture","className","picture_source","setAttribute","imageUrlForRestaurant","image","alt","imageDescriptionForRestaurant","src","name","address","more","location","href","urlForRestaurant","marker","mapMarkerForRestaurant","event","addListener","url","push"],"mappings":"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","file":"main.js","sourcesContent":["let restaurants,\r\n    neighborhoods,\r\n    cuisines\r\nvar map\r\nvar markers = []\r\nvar google\r\n\r\n/**\r\n * checks to see if the service worker API is available, and if it is, the service worker at /sw.js is registered\r\n */\r\nif ('serviceWorker' in navigator) {\r\n    window.addEventListener('load', function () {\r\n        navigator.serviceWorker.register('/sw.js').then(function (registration) {\r\n            // Registration was successful\r\n            console.log('ServiceWorker registration successful with scope: ', registration.scope);\r\n        }, function (err) {\r\n            // registration failed :(\r\n            console.log('ServiceWorker registration failed: ', err);\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\n/* document.addEventListener('DOMContentLoaded', (event) => {\r\n    fetchNeighborhoods();\r\n    fetchCuisines();\r\n}); */\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n    DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n        if (error) { // Got an error\r\n            console.error(error);\r\n        } else {\r\n            self.neighborhoods = neighborhoods;\r\n            fillNeighborhoodsHTML();\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n    const select = document.getElementById('neighborhoods-select');\r\n    neighborhoods.forEach(neighborhood => {\r\n        const option = document.createElement('option');\r\n        option.innerHTML = neighborhood;\r\n        option.value = neighborhood;\r\n        select.append(option);\r\n    });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n    DBHelper.fetchCuisines((error, cuisines) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            self.cuisines = cuisines;\r\n            fillCuisinesHTML();\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n    const select = document.getElementById('cuisines-select');\r\n\r\n    cuisines.forEach(cuisine => {\r\n        const option = document.createElement('option');\r\n        option.innerHTML = cuisine;\r\n        option.value = cuisine;\r\n        select.append(option);\r\n    });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n    let loc = {\r\n        lat: 40.722216,\r\n        lng: -73.987501\r\n    };\r\n    self.map = new google.maps.Map(document.getElementById('map'), {\r\n        zoom: 12,\r\n        center: loc,\r\n        scrollwheel: false\r\n    });\r\n    fetchNeighborhoods();\r\n    fetchCuisines();\r\n    updateRestaurants();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n    const cSelect = document.getElementById('cuisines-select');\r\n    const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n    const cIndex = cSelect.selectedIndex;\r\n    const nIndex = nSelect.selectedIndex;\r\n\r\n    const cuisine = cSelect[cIndex].value;\r\n    const neighborhood = nSelect[nIndex].value;\r\n\r\n    DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            resetRestaurants(restaurants);\r\n            fillRestaurantsHTML();\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n    // Remove all restaurants\r\n    self.restaurants = [];\r\n    const ul = document.getElementById('restaurants-list');\r\n    ul.innerHTML = '';\r\n\r\n    // Remove all map markers\r\n    self.markers.forEach(m => m.setMap(null));\r\n    self.markers = [];\r\n    self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n    const ul = document.getElementById('restaurants-list');\r\n    restaurants.forEach(restaurant => {\r\n        ul.append(createRestaurantHTML(restaurant));\r\n    });\r\n    addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n\r\n    const li = document.createElement('li');\r\n\r\n    const picture = document.createElement('picture');\r\n    picture.className = 'restaurant-img';\r\n    const picture_source = document.createElement('source');\r\n    picture_source.setAttribute('type', 'image/webp');\r\n    picture_source.setAttribute('srcset', `${DBHelper.imageUrlForRestaurant(restaurant)}.webp`);\r\n    picture.append(picture_source);\r\n    const image = document.createElement('img');\r\n    image.className = 'restaurant-img';\r\n    image.alt = DBHelper.imageDescriptionForRestaurant(restaurant);\r\n    image.src = `${DBHelper.imageUrlForRestaurant(restaurant)}.jpg`;\r\n    picture.append(image);\r\n    li.append(picture);\r\n\r\n\r\n\r\n    const name = document.createElement('h1');\r\n    name.innerHTML = restaurant.name;\r\n    li.append(name);\r\n\r\n    const neighborhood = document.createElement('p');\r\n    neighborhood.innerHTML = restaurant.neighborhood;\r\n    li.append(neighborhood);\r\n\r\n    const address = document.createElement('p');\r\n    address.innerHTML = restaurant.address;\r\n    li.append(address);\r\n\r\n    const more = document.createElement('button');\r\n    more.innerHTML = 'View Details';\r\n    more.addEventListener(\"click\", function () {\r\n        window.location.href = DBHelper.urlForRestaurant(restaurant);\r\n    });\r\n    li.append(more)\r\n\r\n    return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n    restaurants.forEach(restaurant => {\r\n        // Add marker to the map\r\n        const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n        google.maps.event.addListener(marker, 'click', () => {\r\n            window.location.href = marker.url\r\n        });\r\n        self.markers.push(marker);\r\n    });\r\n}\r\n\r\n/* window.addEventListener('load', function () {\r\n    var script = document.createElement(\"script\");\r\n    script.async = true;\r\n    script.src =\r\n        'https://maps.googleapis.com/maps/api/js?key=AIzaSyBc_T2Nzol-Ujnwtu82M29yL7Df3TmVxbs&libraries=places&callback=initMap';\r\n    document.body.appendChild(script);\r\n    // alert('Mappa caricata');\r\n}, false); */"]}