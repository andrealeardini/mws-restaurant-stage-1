{"version":3,"sources":["main.js"],"names":["neighborhoods","restaurants","cuisines","navigator","window","addEventListener","serviceWorker","register","then","registration","scope","err","console","log","document","event","fetchNeighborhoods","DBHelper","error","self","fillNeighborhoodsHTML","arguments","length","undefined","select","getElementById","forEach","neighborhood","createElement","option","value","fetchCuisines","fillCuisinesHTML","cuisine","innerHTML","map","google","maps","Map","zoom","center","lat","lng","initMap","scrollwheel","cSelect","updateRestaurants","cIndex","selectedIndex","nIndex","nSelect","resetRestaurants","markers","m","setMap","fillRestaurantsHTML","restaurant","ul","append","createRestaurantHTML","li","image","alt","imageDescriptionForRestaurant","addMarkersToMap","name","className","address","more","href","urlForRestaurant","addListener","marker","location","url","push"],"mappings":"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","file":"main.js","sourcesContent":["let restaurants,\r\n    neighborhoods,\r\n    cuisines\r\nvar map\r\nvar markers = []\r\n\r\n/**\r\n * checks to see if the service worker API is available, and if it is, the service worker at /sw.js is registered\r\n */\r\nif ('serviceWorker' in navigator) {\r\n    window.addEventListener('load', function() {\r\n        navigator.serviceWorker.register('/sw.js').then(function(registration) {\r\n            // Registration was successful\r\n            console.log('ServiceWorker registration successful with scope: ', registration.scope);\r\n        }, function(err) {\r\n            // registration failed :(\r\n            console.log('ServiceWorker registration failed: ', err);\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n    fetchNeighborhoods();\r\n    fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nfetchNeighborhoods = () => {\r\n    DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n        if (error) { // Got an error\r\n            console.error(error);\r\n        } else {\r\n            self.neighborhoods = neighborhoods;\r\n            fillNeighborhoodsHTML();\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n    const select = document.getElementById('neighborhoods-select');\r\n    neighborhoods.forEach(neighborhood => {\r\n        const option = document.createElement('option');\r\n        option.innerHTML = neighborhood;\r\n        option.value = neighborhood;\r\n        select.append(option);\r\n    });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nfetchCuisines = () => {\r\n    DBHelper.fetchCuisines((error, cuisines) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            self.cuisines = cuisines;\r\n            fillCuisinesHTML();\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nfillCuisinesHTML = (cuisines = self.cuisines) => {\r\n    const select = document.getElementById('cuisines-select');\r\n\r\n    cuisines.forEach(cuisine => {\r\n        const option = document.createElement('option');\r\n        option.innerHTML = cuisine;\r\n        option.value = cuisine;\r\n        select.append(option);\r\n    });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n    let loc = {\r\n        lat: 40.722216,\r\n        lng: -73.987501\r\n    };\r\n    self.map = new google.maps.Map(document.getElementById('map'), {\r\n        zoom: 12,\r\n        center: loc,\r\n        scrollwheel: false\r\n    });\r\n    updateRestaurants();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nupdateRestaurants = () => {\r\n    const cSelect = document.getElementById('cuisines-select');\r\n    const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n    const cIndex = cSelect.selectedIndex;\r\n    const nIndex = nSelect.selectedIndex;\r\n\r\n    const cuisine = cSelect[cIndex].value;\r\n    const neighborhood = nSelect[nIndex].value;\r\n\r\n    DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            resetRestaurants(restaurants);\r\n            fillRestaurantsHTML();\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nresetRestaurants = (restaurants) => {\r\n    // Remove all restaurants\r\n    self.restaurants = [];\r\n    const ul = document.getElementById('restaurants-list');\r\n    ul.innerHTML = '';\r\n\r\n    // Remove all map markers\r\n    self.markers.forEach(m => m.setMap(null));\r\n    self.markers = [];\r\n    self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n    const ul = document.getElementById('restaurants-list');\r\n    restaurants.forEach(restaurant => {\r\n        ul.append(createRestaurantHTML(restaurant));\r\n    });\r\n    addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\ncreateRestaurantHTML = (restaurant) => {\r\n\r\n    const li = document.createElement('li');\r\n\r\n    const image = document.createElement('img');\r\n    image.className = 'restaurant-img';\r\n    image.alt = DBHelper.imageDescriptionForRestaurant(restaurant);\r\n    image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n    li.append(image);\r\n\r\n    const name = document.createElement('h1');\r\n    name.innerHTML = restaurant.name;\r\n    li.append(name);\r\n\r\n    const neighborhood = document.createElement('p');\r\n    neighborhood.innerHTML = restaurant.neighborhood;\r\n    li.append(neighborhood);\r\n\r\n    const address = document.createElement('p');\r\n    address.innerHTML = restaurant.address;\r\n    li.append(address);\r\n\r\n    const more = document.createElement('button');\r\n    more.innerHTML = 'View Details';\r\n    more.addEventListener(\"click\", function() {\r\n        window.location.href = DBHelper.urlForRestaurant(restaurant);\r\n    });\r\n    li.append(more)\r\n\r\n    return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\naddMarkersToMap = (restaurants = self.restaurants) => {\r\n    restaurants.forEach(restaurant => {\r\n        // Add marker to the map\r\n        const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n        google.maps.event.addListener(marker, 'click', () => {\r\n            window.location.href = marker.url\r\n        });\r\n        self.markers.push(marker);\r\n    });\r\n}"]}