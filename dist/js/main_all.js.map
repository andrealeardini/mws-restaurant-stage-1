{"version":3,"sources":["idb.js","main.js","dbHelper.js"],"names":["promisifyRequest","request","Promise","resolve","reject","onsuccess","result","onerror","error","promisifyRequestCall","obj","method","args","p","apply","then","proxyProperties","ProxyClass","targetProp","properties","forEach","prop","Object","defineProperty","prototype","get","this","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","value","Cursor","Index","index","_index","cursor","_cursor","_request","ObjectStore","store","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","db","oldVersion","transaction","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","objectStore","IDBTransaction","createObjectStore","IDBDatabase","funcName","replace","arr","Array","slice","call","callback","length","nativeObject","getAll","query","count","instance","items","iterateCursor","push","undefined","continue","exp","open","name","version","upgradeCallback","indexedDB","onupgradeneeded","event","delete","module","exports","default","self","idb","map","google","DBHelper","_dbPromise","_dbOpened","openDB","dbPromise","getRestaurantsFromDB","restaurants","fetchRestaurantsFromNetwork","catch","saveToDB","xhr","XMLHttpRequest","DATABASE_URL","onload","status","JSON","parse","responseText","saveRestaurantsToDB","send","id","fetchRestaurants","restaurant","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","maps","Marker","position","latlng","title","url","urlForRestaurant","animation","Animation","DROP","dbOpened","window","upgradeDb","keyPath","autoIncrement","tx","clear","data","put","navigator","onLine","deleteRestaurantsFromDB","restaurantsStore","review","favorite","fetch","addFavoriteToOfflineDB","getFavoritesOffline","favorites","updateFavorite","toast","deleteFavoriteFromOffline","getReviewsOffline","reviews","FD","FormData","append","restaurant_id","rating","comments","DATABASE_REVIEWS_URL","body","deleteReviewFromOffline","fetchReviewsFromNetwork","location","href","includes","fillReviewsHTML","sendOfflineFavoritesToServer","sendOfflineReviewsToServer","setTimeout","syncFavorites","syncReviews","is_favorite","document","getElementById","classList","add","remove","getReviewsFromDB","fetchReviews","response","json","saveReviewsToDB","deleteReviewsFromDB","reviewsStore","parseInt","Number","markers","showImage","entries","observer","entry","isIntersecting","loadPicture","target","unobserve","options","root","rootMargin","threshold","IntersectionObserver","picture","source_webp","getElementsByTagName","source_jpg","img","src_webp","dataset","src","src_jpg","srcset","addEventListener","serviceWorker","register","registration","err","fetchNeighborhoods","fetchCuisines","fillNeighborhoodsHTML","select","option","createElement","innerHTML","fillCuisinesHTML","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","contains","m","setMap","ul","createRestaurantHTML","hidden","addMarkersToMap","li","picture_source_webp","setAttribute","picture_source_jpg","image","className","alt","imageDescriptionForRestaurant","imageUrlForRestaurant","observe","address","more","favorite_btn","favorite_fab","innerText","onFavoriteClick","marker","mapMarkerForRestaurant","addListener","gm_authFailure","showMap","scrMaps","e","favoriteHTML","nodeName","parentElement","firstElementChild","toggle","msg","millisenconds","priority","toastHTML","timer","clearTimeout","initMap","Map","zoom","center","lat","lng","gestureHandling","googleMapsError","syncAll"],"mappings":"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","file":"main_all.js","sourcesContent":["'use strict';\n\n(function () {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function (resolve, reject) {\n      request.onsuccess = function () {\n        resolve(request.result);\n      };\n\n      request.onerror = function () {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function (resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function (value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function (prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function () {\n          return this[targetProp][prop];\n        },\n        set: function (val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function (prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function () {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function (prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function () {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function (prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function () {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function (methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function () {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function () {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function (value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function () {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function () {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function (resolve, reject) {\n      idbTransaction.oncomplete = function () {\n        resolve();\n      };\n      idbTransaction.onerror = function () {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function () {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function () {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function () {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function () {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function (funcName) {\n    [ObjectStore, Index].forEach(function (Constructor) {\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function () {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function () {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function (Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function (query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function (resolve) {\n        instance.iterateCursor(query, function (cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function (name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function (event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function (db) {\n        return new DB(db);\n      });\n    },\n    delete: function (name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  } else {\n    self.idb = exp;\n  }\n}());","let restaurants,\r\n  neighborhoods,\r\n  cuisines;\r\n// use var to define map to avoid an error with API\r\nvar map;\r\nvar markers = [];\r\nvar google;\r\n\r\n/**\r\n * create observe to show images only when they are in viewport\r\n */\r\nlet showImage = function (entries, observer) {\r\n  entries.forEach(entry => {\r\n    if (entry.isIntersecting) {\r\n      loadPicture(entry.target);\r\n      observer.unobserve(entry.target);\r\n    }\r\n  });\r\n};\r\n\r\nconst options = {\r\n  root: null,\r\n  rootMargin: '0px',\r\n  threshold: [0]\r\n};\r\nlet observer = new IntersectionObserver(showImage, options);\r\n\r\n/**\r\n * loads the picture\r\n */\r\nfunction loadPicture(picture) {\r\n  const source_webp = picture.getElementsByTagName('source')[0];\r\n  const source_jpg = picture.getElementsByTagName('source')[1];\r\n  const img = picture.getElementsByTagName('img')[0];\r\n\r\n  const src_webp = source_webp.dataset.src;\r\n  const src_jpg = source_jpg.dataset.src;\r\n  const src = img.dataset.src;\r\n  if (!src) {\r\n    return;\r\n  }\r\n  source_webp.srcset = src_webp;\r\n  source_jpg.srcset = src_jpg;\r\n  img.src = src;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * checks to see if the service worker API is available, and if it is, the service worker at /sw.js is registered\r\n */\r\nif ('serviceWorker' in navigator) {\r\n  window.addEventListener('load', function () {\r\n    navigator.serviceWorker.register('/sw.js').then(function (registration) {\r\n      // Registration was successful\r\n      void 0;\r\n    }, function (err) {\r\n      // registration failed :(\r\n      void 0;\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      void 0;\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      void 0;\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      void 0;\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  self.restaurants = restaurants;\r\n  //exit if Google Maps is disabled\r\n  if (document.getElementById('map').classList.contains('inactive')) {\r\n    return;\r\n  }\r\n  self.markers.forEach(m => m.setMap(null));\r\n  self.markers = [];\r\n};\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  if (document.getElementById('image-blurred-text').hidden) {\r\n    addMarkersToMap();\r\n  }\r\n};\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n\r\n\r\n  const li = document.createElement('li');\r\n\r\n  const picture = document.createElement('picture');\r\n\r\n  const picture_source_webp = document.createElement('source');\r\n  picture_source_webp.setAttribute('type', 'image/webp');\r\n  picture.append(picture_source_webp);\r\n\r\n  const picture_source_jpg = document.createElement('source');\r\n  picture_source_jpg.setAttribute('type', 'image/jpeg');\r\n  picture.append(picture_source_jpg);\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  image.alt = DBHelper.imageDescriptionForRestaurant(restaurant);\r\n  // lazy load images only if the browser support Intersection Observer\r\n  if ('IntersectionObserver' in window) {\r\n    picture_source_webp.setAttribute('data-src', `${DBHelper.imageUrlForRestaurant(restaurant)}.webp`);\r\n    picture_source_jpg.setAttribute('data-src', `${DBHelper.imageUrlForRestaurant(restaurant)}.jpg`);\r\n    image.setAttribute('data-src', `${DBHelper.imageUrlForRestaurant(restaurant)}.jpg`);\r\n  } else {\r\n    picture_source_webp.setAttribute('srcset', `${DBHelper.imageUrlForRestaurant(restaurant)}.webp`);\r\n    picture_source_jpg.setAttribute('srcset', `${DBHelper.imageUrlForRestaurant(restaurant)}.jpg`);\r\n    image.src = `${DBHelper.imageUrlForRestaurant(restaurant)}.jpg`;\r\n  }\r\n  picture.append(image);\r\n  li.append(picture);\r\n  observer.observe(picture);\r\n\r\n  const name = document.createElement('h1');\r\n  name.innerHTML = restaurant.name;\r\n  li.append(name);\r\n\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('button');\r\n  more.classList.add('button');\r\n  more.innerHTML = 'View Details';\r\n  more.addEventListener('click', function () {\r\n    window.location.href = DBHelper.urlForRestaurant(restaurant);\r\n  });\r\n  li.append(more);\r\n\r\n  DBHelper.getFavoritesOffline().then(favorites => {\r\n    if (favorites.length) {\r\n      const results = favorites.filter(r => r.id == restaurant.id);\r\n      if (results.length) {\r\n        restaurant.is_favorite = results[0].value;\r\n      }\r\n    }\r\n\r\n    const favorite_btn = document.createElement('button');\r\n    favorite_btn.classList.add('mdc-fab', 'mdc-fab--mini', 'app-fab--favorite');\r\n\r\n    const favorite_fab = document.createElement('span');\r\n    favorite_fab.classList.add('mdc-fab__icon', 'material-icons');\r\n    favorite_fab.innerText = 'favorite_border';\r\n    favorite_btn.append(favorite_fab);\r\n    li.append(favorite_btn);\r\n    if (restaurant.is_favorite) {\r\n      if ((restaurant.is_favorite == true) || (restaurant.is_favorite == 'true')) {\r\n        favorite_btn.classList.add('app-fab--isfavorite');\r\n        favorite_btn.setAttribute('aria-label', 'The restaurant is marked as favorite');\r\n        favorite_fab.innerText = 'favorite';\r\n      } else {\r\n        favorite_btn.setAttribute('aria-label', 'Click to mark the restaurant as favorite');\r\n        favorite_fab.innerText = 'favorite_border';\r\n      }\r\n    }\r\n    // will use restaurant id to set field in DB\r\n    favorite_btn.id = restaurant.id;\r\n    favorite_btn.addEventListener('click', onFavoriteClick);\r\n  });\r\n\r\n  return li;\r\n};\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url;\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n};\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    gestureHandling: 'cooperative'\r\n  });\r\n  updateRestaurants();\r\n  document.getElementById('map').classList.remove('inactive');\r\n  document.getElementById('image-blurred').hidden = true;\r\n  document.getElementById('image-blurred-text').hidden = true;\r\n\r\n};\r\n\r\nwindow.googleMapsError = () => {\r\n  // console.log('Google Maps Error to handle');\r\n};\r\n\r\nfunction gm_authFailure() {\r\n  // console.log('Google Maps Error to handle');\r\n}\r\n\r\nfunction showMap() {\r\n  const scrMaps = document.getElementById('GoogleMaps');\r\n  scrMaps.src = scrMaps.dataset.src;\r\n}\r\n\r\nwindow.addEventListener('load', (event) => {\r\n  updateRestaurants();\r\n  document.getElementById('map-container').addEventListener('click', showMap);\r\n  DBHelper.syncAll();\r\n});\r\n\r\nfunction onFavoriteClick(e) {\r\n  let favoriteHTML;\r\n  if (e.target.nodeName == 'SPAN') {\r\n    favoriteHTML = e.target.parentElement;\r\n  } else {\r\n    favoriteHTML = e.target;\r\n  }\r\n  void 0;\r\n  let favorite = {\r\n    id: favoriteHTML.id,\r\n    value: 'false'\r\n  };\r\n  if (!(favoriteHTML.classList.contains('app-fab--isfavorite'))) {\r\n    favorite.value = 'true';\r\n  }\r\n\r\n  DBHelper.updateFavorite(favorite).then(() => {\r\n    void 0;\r\n  });\r\n\r\n  if (favorite.value == 'true') {\r\n    favoriteHTML.setAttribute('aria-label', 'The restaurant is marked as favorite');\r\n    favoriteHTML.firstElementChild.innerText = 'favorite';\r\n  } else {\r\n    favoriteHTML.setAttribute('aria-label', 'Click to mark the restaurant as favorite');\r\n    favoriteHTML.firstElementChild.innerText = 'favorite_border';\r\n  }\r\n  favoriteHTML.classList.toggle('app-fab--isfavorite');\r\n}\r\n\r\n\r\nwindow.addEventListener('online', (event) => {\r\n  // console.log(\"You are online\")\r\n  let offline = document.getElementById('offline');\r\n  offline.classList.remove('show');\r\n  toast('You are online.' + '\\n' +\r\n    'All changes will be synchronized.', 3000);\r\n  DBHelper.syncAll();\r\n});\r\n\r\nwindow.addEventListener('offline', (event) => {\r\n  // console.log(\"You are offline\")\r\n  let offline = document.getElementById('offline');\r\n  offline.classList.add('show');\r\n  toast('You are offine.' + '\\n' +\r\n    'All changes will be synchronized when you return online.', 5000);\r\n});\r\n\r\n/**\r\n * Show a toast\r\n * @msg the message to show\r\n * @milliseconds the durate of the toast in millisenconds\r\n * @priority set to true to override the previous toast if is still displayed\r\n * \r\n * by Andrea Leardini\r\n */\r\nfunction toast(msg, millisenconds, priority = false) {\r\n  let toastHTML = document.getElementById('toast');\r\n  let timer;\r\n  if (toastHTML.classList.contains('show') == true) {\r\n    // avoid to display the same messagere multiple times\r\n    if (msg == toastHTML.innerText) {\r\n      return;\r\n    }\r\n    if (priority == false) {\r\n      setTimeout(() => {\r\n        // wait until the previeous message is hide\r\n        clearTimeout(timer);\r\n        toast(msg, millisenconds, priority);\r\n      }, 2000);\r\n      return;\r\n    }\r\n  }\r\n  toastHTML.innerText = msg;\r\n  toastHTML.classList.add('show');\r\n  // After x milliseconds hide the toast\r\n  timer = setTimeout(() => {\r\n    toastHTML.classList.remove('show');\r\n  }, millisenconds);\r\n}\r\n\r\nwindow.addEventListener('DOMContentLoaded', (event) => {\r\n  if ((!navigator.onLine)) {\r\n    let offline = document.getElementById('offline');\r\n    offline.classList.add('show');\r\n  }\r\n});","/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  set dbPromise(value) {\r\n    this._dbPromise = value;\r\n  }\r\n\r\n  get dbPromise() {\r\n    return this._dbPromise;\r\n  }\r\n\r\n  set dbOpened(value) {\r\n    this._dbOpened = value;\r\n  }\r\n\r\n  get dbOpened() {\r\n    return this._dbOpened;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  static get DATABASE_REVIEWS_URL() {\r\n    const port = 1337; // Change this to your server port\r\n    return `http://localhost:${port}/reviews`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n\r\n    // open DB and set dbPromise\r\n    DBHelper.openDB().then(function (db) {\r\n      if (db) {\r\n        DBHelper.dbPromise = db;\r\n        void 0;\r\n        // Read restaurants from DB;\r\n        DBHelper.getRestaurantsFromDB().then(restaurants => {\r\n          if (restaurants.length) {\r\n            callback(null, restaurants);\r\n          } else {\r\n            void 0;\r\n            DBHelper.fetchRestaurantsFromNetwork(callback);\r\n          }\r\n        });\r\n      } else {\r\n        void 0;\r\n        DBHelper.fetchRestaurantsFromNetwork(callback);\r\n      }\r\n    }).then(function () {}).catch(function () {\r\n      void 0;\r\n      DBHelper.fetchRestaurantsFromNetwork(callback);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants from network.\r\n   */\r\n  static fetchRestaurantsFromNetwork(callback, saveToDB = true) {\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.open('GET', DBHelper.DATABASE_URL);\r\n    xhr.onload = () => {\r\n      if (xhr.status === 200) { // Got a success response from server!\r\n        const restaurants = JSON.parse(xhr.responseText);\r\n        void 0;\r\n        callback(null, restaurants);\r\n        // write restaurants to db\r\n        if (saveToDB) {\r\n          DBHelper.saveRestaurantsToDB(restaurants);\r\n        }\r\n      } else { // Oops!. Got an error from server.\r\n        const error = (`Request failed. Returned status of ${xhr.status}`);\r\n        callback(error, null);\r\n      }\r\n    };\r\n    xhr.send();\r\n  }\r\n\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants;\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    // use id instead photograph to avoid an error with Casa Enrique (a bug?)\r\n    return (`/img/${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image description.\r\n   */\r\n  static imageDescriptionForRestaurant(restaurant) {\r\n    // Please note that I used Google Translate. Translations can be a little fun... \r\n    const altImg = [\r\n      'Inside view of the Mission Chinese Food restaurant. Many people talk to each other',\r\n      'A pizza cut into six slices',\r\n      'Inside view of Kang Ho Dong Baekjeong restaurant. You can see various modern style tables and chairs',\r\n      'Panoramic photo of the entrance. You can see the two streets on which the restaurant overlooks',\r\n      'Inside view of the Roberto\\'s Pizza. In the background, see the kitchen and some pizza makers',\r\n      'Inside view of the Hometown BBQ restaurant. On the wall a huge US flag',\r\n      'Two people walking around the restaurand. You can see some customers inside',\r\n      'Detail of the The Dutch banner',\r\n      'Inside view of the Mu Ramen restaurant. Some customers eat using the typical oriental chopsticks',\r\n      'Inside view of restaurant. You see the counter with the window and several bottles.'\r\n    ];\r\n    return (altImg[restaurant.id - 1]);\r\n  }\r\n\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    });\r\n    return marker;\r\n  }\r\n\r\n  static openDB() {\r\n    //check for support\r\n    DBHelper.dbOpened = true;\r\n    if (!('indexedDB' in window)) {\r\n      void 0;\r\n      return Promise.resolve();\r\n    }\r\n\r\n    return idb.open('restaurants-reviews', 4, upgradeDb => {\r\n      switch (upgradeDb.oldVersion) {\r\n        case 0:\r\n          upgradeDb.createObjectStore('restaurants', {\r\n            keyPath: 'id'\r\n          });\r\n        case 1:\r\n          upgradeDb.createObjectStore('reviews', {\r\n            keyPath: 'id'\r\n          });\r\n          var reviewsStore = upgradeDb.transaction.objectStore('reviews');\r\n          reviewsStore.createIndex('restaurant', 'restaurant_id');\r\n        case 2:\r\n          upgradeDb.createObjectStore('offline-reviews', {\r\n            keyPath: 'id',\r\n            autoIncrement: true\r\n          });\r\n        case 3:\r\n          upgradeDb.createObjectStore('offline-favorites', {\r\n            keyPath: 'id',\r\n            autoIncrement: true\r\n          });\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * Delete a restaurants from local DB\r\n   */\r\n  static deleteRestaurantsFromDB(db = DBHelper.db) {\r\n    if (!db) return;\r\n    const tx = db.transaction('restaurants', 'readwrite');\r\n    const restaurantsStore = tx.objectStore('restaurants');\r\n    restaurantsStore.clear();\r\n    void 0;\r\n    return tx.complete;\r\n  }\r\n\r\n  /**\r\n   * Save the restaurant in the local DB\r\n   */\r\n  static addRestaurantToDB(db, data) {\r\n    if (!db) return;\r\n    void 0;\r\n    const tx = db.transaction('restaurants', 'readwrite');\r\n    const restaurantsStore = tx.objectStore('restaurants');\r\n    restaurantsStore.put(data);\r\n    void 0;\r\n    return tx.complete;\r\n  }\r\n\r\n  /**\r\n   * Get all restaurants from local DB\r\n   */\r\n  static getRestaurantsFromDB() {\r\n    if (!DBHelper.dbPromise) return;\r\n    const tx = DBHelper.dbPromise.transaction('restaurants', 'readonly');\r\n    const restaurantsStore = tx.objectStore('restaurants');\r\n    return restaurantsStore.getAll();\r\n  }\r\n\r\n\r\n  /*\r\n   * Save data to local database\r\n   */\r\n  static saveRestaurantsToDB(data) {\r\n    if (!(DBHelper.dbOpened)) {\r\n      return;\r\n    }\r\n    if (navigator.onLine == true) {\r\n      DBHelper.deleteRestaurantsFromDB();\r\n      let tx = DBHelper.dbPromise.transaction('restaurants', 'readwrite');\r\n      let restaurantsStore = tx.objectStore('restaurants');\r\n      data.forEach(function (restaurant) {\r\n        restaurantsStore.put(restaurant);\r\n      });\r\n      void 0;\r\n      return tx.complete;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /*\r\n   * Update favorite to local database\r\n   */\r\n  static updateRestaurantLocalDB(restaurant) {\r\n    if (!(DBHelper.dbOpened)) {\r\n      return;\r\n    }\r\n    let tx = DBHelper.dbPromise.transaction('restaurants', 'readwrite');\r\n    let restaurantsStore = tx.objectStore('restaurants');\r\n    restaurantsStore.put(restaurant);\r\n    return tx.complete;\r\n  }\r\n\r\n  /*\r\n   * add review to offline db (will be synch when online)\r\n   */\r\n  static addReviewToOfflineDB(review) {\r\n    if (!(DBHelper.dbOpened)) {\r\n      return;\r\n    }\r\n    let tx = DBHelper.dbPromise.transaction('offline-reviews', 'readwrite');\r\n    let offlineStore = tx.objectStore('offline-reviews');\r\n    offlineStore.put(review);\r\n    return tx.complete;\r\n  }\r\n\r\n  /**\r\n   * Get all offline reviews from local DB\r\n   */\r\n  static getReviewsOffline() {\r\n    if (!DBHelper.dbPromise) return;\r\n    const tx = DBHelper.dbPromise.transaction('offline-reviews', 'readonly');\r\n    const offlineStore = tx.objectStore('offline-reviews');\r\n    return offlineStore.getAll();\r\n  }\r\n\r\n  /**\r\n   * Delete review from offline-reviews db.\r\n   */\r\n  static deleteReviewFromOffline(review) {\r\n    const tx = DBHelper.dbPromise.transaction('offline-reviews', 'readwrite');\r\n    const offlineStore = tx.objectStore('offline-reviews');\r\n    return offlineStore.delete(review.id);\r\n  }\r\n\r\n  /*\r\n   * add favorite to offline db (will be synch when online)\r\n   */\r\n  static addFavoriteToOfflineDB(favorite) {\r\n    if (!(DBHelper.dbOpened)) {\r\n      return;\r\n    }\r\n    let tx = DBHelper.dbPromise.transaction('offline-favorites', 'readwrite');\r\n    let offlineStore = tx.objectStore('offline-favorites');\r\n    offlineStore.put(favorite);\r\n    return tx.complete;\r\n  }\r\n\r\n\r\n  /**\r\n   * Get favorites from offline-favorites db.\r\n   */\r\n  static getFavoritesOffline() {\r\n    if (!DBHelper.dbPromise) return;\r\n    const tx = DBHelper.dbPromise.transaction('offline-favorites', 'readonly');\r\n    const offlineStore = tx.objectStore('offline-favorites');\r\n    return offlineStore.getAll();\r\n  }\r\n\r\n  /**\r\n   * Delete favorites from offline-favorites db.\r\n   */\r\n  static deleteFavoriteFromOffline(favorite) {\r\n    const tx = DBHelper.dbPromise.transaction('offline-favorites', 'readwrite');\r\n    const offlineStore = tx.objectStore('offline-favorites');\r\n    return offlineStore.delete(favorite.id);\r\n  }\r\n\r\n  /**\r\n   * Update the favorite status of the restaurant\r\n   */\r\n  static updateFavorite(favorite) {\r\n    return fetch(`${DBHelper.DATABASE_URL}/${favorite.id}/?is_favorite=${favorite.value}`, {\r\n      method: 'PUT',\r\n    }).then(function () {\r\n      void 0;\r\n      DBHelper.fetchRestaurantsFromNetwork((error, restaurants) => {\r\n        if (error) {\r\n          void 0;\r\n        }\r\n      }, true)\r\n    }).catch(function (error) {\r\n      void 0;\r\n      DBHelper.addFavoriteToOfflineDB(favorite);\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Send all offline favorites to the server\r\n   */\r\n  static sendOfflineFavoritesToServer(callback) {\r\n    // read all offline favorites\r\n    return DBHelper.getFavoritesOffline().then(favorites => {\r\n      // send favorites to the server\r\n      favorites.forEach(favorite => {\r\n        return DBHelper.updateFavorite(favorite).then(function () {\r\n          toast('Favorites offline submitted', 5000);\r\n          DBHelper.deleteFavoriteFromOffline(favorite);\r\n        }).catch(function (error) {\r\n          void 0;\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Send all offline reviews to the server\r\n   */\r\n  static sendOfflineReviewsToServer() {\r\n    // read all offline reviews\r\n    return DBHelper.getReviewsOffline().then(reviews => {\r\n      // send reviews to the server\r\n      reviews.forEach(review => {\r\n        var FD = new FormData();\r\n        // setting form data\r\n        FD.append('restaurant_id', review.restaurant_id);\r\n        FD.append('name', review.name);\r\n        FD.append('rating', review.rating);\r\n        FD.append('comments', review.comments);\r\n        return fetch(`${DBHelper.DATABASE_REVIEWS_URL}/`, {\r\n          method: 'POST',\r\n          body: FD\r\n        }).then(function () {\r\n          void 0;\r\n          toast('Review offline submitted', 5000);\r\n          DBHelper.deleteReviewFromOffline(review);\r\n          return DBHelper.fetchReviewsFromNetwork(review.restaurant_id, (error, reviews) => {\r\n            void 0;\r\n            let pageURL = window.location.href;\r\n            if (pageURL.includes('/restaurant.html?id=')) {\r\n              fillReviewsHTML(reviews, false, true);\r\n            }\r\n          }, true);\r\n        }).catch(function (error) {\r\n          toast('Sending review offline.... Oops! Something went wrong.', 5000);\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Sync all changes to the restaurants \r\n   */\r\n  static syncFavorites() {\r\n    DBHelper.sendOfflineFavoritesToServer((error, favorites) => {\r\n      if (error) {\r\n        void 0;\r\n        return error;\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Sync all changes to the reviews\r\n   */\r\n  static syncReviews(callback) {\r\n    // send ALL offline reviews (this one and the others restaurants)\r\n    return DBHelper.sendOfflineReviewsToServer().then(() => {\r\n      return callback(null)\r\n    }).catch((error) => {\r\n      void 0;\r\n      return callback(error, null);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sync all changes\r\n   */\r\n  static syncAll() {\r\n    if (navigator.onLine == true) {\r\n      setTimeout(() => {\r\n        DBHelper.syncFavorites();\r\n        DBHelper.syncReviews((error) => {\r\n          if (error) {\r\n            void 0;\r\n            return error;\r\n          }\r\n        });\r\n      }, 2000);\r\n    }\r\n  }\r\n\r\n  /*\r\n   * Set favorite status\r\n   */\r\n  static setFavoriteStatus(restaurant) {\r\n    if (restaurant.is_favorite) {\r\n      const favorite = document.getElementById(restaurant.id);\r\n      if ((restaurant.is_favorite == true) || (restaurant.is_favorite == 'true')) {\r\n        favorite.classList.add('restaurant-name_isfavorite');\r\n      } else {\r\n        favorite.classList.remove('restaurant-name_isfavorite');\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Fetch all reviews.\r\n   * @restaurant_id : if specified fetch only the reviews of this restaurants\r\n   */\r\n  static fetchReviews(restaurant_id, callback) {\r\n\r\n    // open DB and set dbPromise\r\n    DBHelper.openDB().then(function (db) {\r\n      if (db) {\r\n        DBHelper.dbPromise = db;\r\n        void 0;\r\n        // Read reviews from DB;\r\n        DBHelper.getReviewsFromDB(restaurant_id).then(reviews => {\r\n          if (reviews.length) {\r\n            return callback(null, reviews);\r\n          } else {\r\n            void 0;\r\n            DBHelper.fetchReviewsFromNetwork(restaurant_id, callback);\r\n          }\r\n        });\r\n      } else {\r\n        void 0;\r\n        DBHelper.fetchReviewsFromNetwork(restaurant_id, callback);\r\n      }\r\n    }).then(function () {}).catch(function () {\r\n      void 0;\r\n      DBHelper.fetchReviewsFromNetwork(restaurant_id, callback);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch a review by its ID.\r\n   */\r\n  static fetchReviewById(id, callback) {\r\n    // fetch all reviews with proper error handling.\r\n    DBHelper.fetchReviews(null, (error, reviews) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const review = reviews.find(r => r.id == id);\r\n        if (review) { // Got the review\r\n          callback(null, review);\r\n        } else { // review does not exist in the database\r\n          callback('Review does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all reviews of the restaurant from network.\r\n   */\r\n  static fetchReviewsFromNetwork(restaurant_id, callback, saveToDB = true) {\r\n    // Restaurant Reviews\r\n    // Offline USE\r\n    // The client application works offline.\r\n    // JSON responses are cached using the IndexedDB API.\r\n    // Any data PREVIOUSLY accessed while connected is reachable while offline.\r\n\r\n    return fetch(`${DBHelper.DATABASE_REVIEWS_URL}/?restaurant_id=${restaurant_id}`, {\r\n      method: 'GET'\r\n    }).then(function (response) {\r\n      return response.json();\r\n    }).then(function (json) {\r\n      let reviews = json;\r\n      void 0;\r\n      // write reviews to db\r\n      if (saveToDB) {\r\n        return DBHelper.saveReviewsToDB(restaurant_id, reviews).then(() => {\r\n          return callback(null, reviews);\r\n        });\r\n      } else {\r\n        return callback(null, reviews);\r\n      }\r\n    }).catch(function (error) {\r\n      return callback(error, null);\r\n    });\r\n  }\r\n\r\n\r\n\r\n  /*\r\n   * Save reviews to local database\r\n   */\r\n  static saveReviewsToDB(restaurant_id, data) {\r\n    if (!(DBHelper.dbOpened)) {\r\n      return;\r\n    }\r\n    // delete all reviews of this restaurants\r\n    if (navigator.onLine == true) {\r\n      return DBHelper.deleteReviewsFromDB(restaurant_id).then(() => {\r\n        let tx = DBHelper.dbPromise.transaction('reviews', 'readwrite');\r\n        let reviewsStore = tx.objectStore('reviews');\r\n        void 0;\r\n        data.forEach(function (review) {\r\n          review.restaurant_id = parseInt(review.restaurant_id);\r\n          reviewsStore.put(review);\r\n          void 0;\r\n        });\r\n        return tx.complete;\r\n      });\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * delete all reviews of the restaurant in the local DB\r\n   *\r\n   */\r\n  static deleteReviewsFromDB(restaurant_id) {\r\n    if (!DBHelper.dbPromise) return;\r\n    return DBHelper.getReviewsFromDB(restaurant_id).then(reviews => {\r\n      const tx = DBHelper.dbPromise.transaction('reviews', 'readwrite');\r\n      const reviewsStore = tx.objectStore('reviews');\r\n      reviews.forEach(review => {\r\n        reviewsStore.delete(review.id);\r\n      });\r\n      return tx.complete;\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * get all reviews.\r\n   * @restaurant_id : if specified get only the reviews of this restaurants\r\n   */\r\n  static getReviewsFromDB(restaurant_id) {\r\n    if (!DBHelper.dbPromise) return;\r\n    const tx = DBHelper.dbPromise.transaction('reviews', 'readonly');\r\n    const reviewsStore = tx.objectStore('reviews');\r\n    if (!restaurant_id) {\r\n      return reviewsStore.getAll();\r\n    } else {\r\n      let index = reviewsStore.index('restaurant');\r\n      return index.getAll(Number(restaurant_id));\r\n    }\r\n  }\r\n}"]}