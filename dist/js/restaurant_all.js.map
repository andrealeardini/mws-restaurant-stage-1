{"version":3,"sources":["idb.js","restaurant_info.js","dbHelper.js"],"names":["promisifyRequest","request","Promise","resolve","reject","onsuccess","result","onerror","error","promisifyRequestCall","obj","method","args","p","apply","then","proxyProperties","ProxyClass","targetProp","properties","forEach","prop","Object","defineProperty","prototype","get","this","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","value","Cursor","Index","index","_index","cursor","_cursor","_request","ObjectStore","store","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","db","oldVersion","transaction","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","objectStore","IDBTransaction","createObjectStore","IDBDatabase","funcName","replace","arr","Array","slice","call","callback","length","nativeObject","getAll","query","count","instance","items","iterateCursor","push","undefined","continue","exp","open","name","version","upgradeCallback","indexedDB","onupgradeneeded","event","delete","module","exports","default","self","idb","restaurant","map","DBHelper","dbPromise","upgradeDB","keyPath","_this","fetchRestaurantsFromLocalDB","restaurants","xhr","XMLHttpRequest","DATABASE_URL","onload","status","JSON","parse","responseText","put","catch","send","id","parseInt","fetchRestaurants","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","google","maps","Marker","position","latlng","title","url","urlForRestaurant","animation","Animation","DROP","window","initMap","fetchRestaurantFromURL","console","Map","document","getElementById","zoom","center","gestureHandling","fillBreadcrumb","mapMarkerForRestaurant","InitIDB","getParameterByName","fetchRestaurantById","fillRestaurantHTML","innerHTML","address","picture","picture_source","createElement","setAttribute","imageUrlForRestaurant","append","image","alt","imageDescriptionForRestaurant","src","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","day","className","appendChild","time","reviews","container","noReviews","ul","review","createReviewHTML","li","header","date","rating","comments","breadcrumb","a","href","location","RegExp","exec","decodeURIComponent"],"mappings":"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","file":"restaurant_all.js","sourcesContent":["'use strict';\n\n(function () {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function (resolve, reject) {\n      request.onsuccess = function () {\n        resolve(request.result);\n      };\n\n      request.onerror = function () {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function (resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function (value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function (prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function () {\n          return this[targetProp][prop];\n        },\n        set: function (val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function (prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function () {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function (prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function () {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function (prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function () {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function (methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function () {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function () {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function (value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function () {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function () {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function (resolve, reject) {\n      idbTransaction.oncomplete = function () {\n        resolve();\n      };\n      idbTransaction.onerror = function () {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function () {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function () {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function () {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function () {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function (funcName) {\n    [ObjectStore, Index].forEach(function (Constructor) {\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function () {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function () {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function (Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function (query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function (resolve) {\n        instance.iterateCursor(query, function (cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function (name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function (event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function (db) {\n        return new DB(db);\n      });\n    },\n    delete: function (name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  } else {\n    self.idb = exp;\n  }\n}());","var restaurant;\r\nvar map;\r\n\r\n\r\n/**\r\n * checks to see if the service worker API is available, and if it is, the service worker at /sw.js is registered\r\n */\r\n/* if ('serviceWorker' in navigator) {\r\n    window.addEventListener('load', function () {\r\n        navigator.serviceWorker.register('/sw.js').then(function (registration) {\r\n            // Registration was successful\r\n            console.log('ServiceWorker registration successful with scope: ', registration.scope);\r\n        }, function (err) {\r\n            // registration failed :(\r\n            console.log('ServiceWorker registration failed: ', err);\r\n        });\r\n    });\r\n    DBHelper.InitIDB();\r\n} */\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n    fetchRestaurantFromURL((error, restaurant) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            self.map = new google.maps.Map(document.getElementById('map'), {\r\n                zoom: 16,\r\n                center: restaurant.latlng,\r\n                gestureHandling: 'cooperative'\r\n            });\r\n            fillBreadcrumb();\r\n            DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n        }\r\n    });\r\n}\r\n\r\nDBHelper.InitIDB();\r\n\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nconst fetchRestaurantFromURL = (callback) => {\r\n    if (self.restaurant) { // restaurant already fetched!\r\n        callback(null, self.restaurant)\r\n        return;\r\n    }\r\n    const id = getParameterByName('id');\r\n    if (!id) { // no id found in URL\r\n        const error = 'No restaurant id in URL'\r\n        callback(error, null);\r\n    } else {\r\n        DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n            self.restaurant = restaurant;\r\n            if (!restaurant) {\r\n                console.error(error);\r\n                return;\r\n            }\r\n            fillRestaurantHTML();\r\n            callback(null, restaurant)\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\r\n    const name = document.getElementById('restaurant-name');\r\n    name.innerHTML = restaurant.name;\r\n\r\n    const address = document.getElementById('restaurant-address');\r\n    address.innerHTML = restaurant.address;\r\n\r\n    const picture = document.getElementById('restaurant-img');\r\n    const picture_source = document.createElement('source');\r\n    picture_source.setAttribute('type', 'image/webp');\r\n    picture_source.setAttribute('srcset', `${DBHelper.imageUrlForRestaurant(restaurant)}.webp`);\r\n    picture.append(picture_source);\r\n    const image = document.createElement('img');\r\n    image.alt = DBHelper.imageDescriptionForRestaurant(restaurant);\r\n    image.src = `${DBHelper.imageUrlForRestaurant(restaurant)}.jpg`;\r\n    picture.append(image);\r\n\r\n    const cuisine = document.getElementById('restaurant-cuisine');\r\n    cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n    // fill operating hours\r\n    if (restaurant.operating_hours) {\r\n        fillRestaurantHoursHTML();\r\n    }\r\n    // fill reviews\r\n    fillReviewsHTML();\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n    const hours = document.getElementById('restaurant-hours');\r\n    for (let key in operatingHours) {\r\n        const row = document.createElement('tr');\r\n\r\n        const day = document.createElement('td');\r\n        day.innerHTML = key;\r\n        day.className = \"restaurant-day\";\r\n        row.appendChild(day);\r\n\r\n        const time = document.createElement('td');\r\n        time.innerHTML = operatingHours[key];\r\n        row.appendChild(time);\r\n\r\n        hours.appendChild(row);\r\n    }\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\r\n    const container = document.getElementById('reviews-container');\r\n    const title = document.createElement('h2');\r\n    title.innerHTML = 'Reviews';\r\n    container.appendChild(title);\r\n\r\n    if (!reviews) {\r\n        const noReviews = document.createElement('p');\r\n        noReviews.innerHTML = 'No reviews yet!';\r\n        container.appendChild(noReviews);\r\n        return;\r\n    }\r\n    const ul = document.getElementById('reviews-list');\r\n    reviews.forEach(review => {\r\n        ul.appendChild(createReviewHTML(review));\r\n    });\r\n    container.appendChild(ul);\r\n}\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\nconst createReviewHTML = (review) => {\r\n    const li = document.createElement('li');\r\n\r\n    const header = document.createElement('div')\r\n    header.className = \"reviews-header\";\r\n    const name = document.createElement('p');\r\n    name.innerHTML = review.name;\r\n    name.className = \"reviews-name\";\r\n    header.appendChild(name);\r\n\r\n    const date = document.createElement('p');\r\n    date.innerHTML = review.date;\r\n    date.className = \"reviews-date\";\r\n    header.appendChild(date);\r\n\r\n    li.appendChild(header);\r\n\r\n    const rating = document.createElement('p');\r\n    rating.innerHTML = `Rating: ${review.rating}`;\r\n    rating.className = \"reviews-rating\";\r\n    li.appendChild(rating);\r\n\r\n    const comments = document.createElement('p');\r\n    comments.innerHTML = review.comments;\r\n    li.appendChild(comments);\r\n\r\n    return li;\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\r\n    const breadcrumb = document.getElementById('breadcrumb');\r\n    const li = document.createElement('li');\r\n    const a = document.createElement('a');\r\n    a.href = DBHelper.urlForRestaurant(restaurant);\r\n    a.innerHTML = restaurant.name;\r\n    a.setAttribute(\"aria-current\", \"page\");\r\n    li.appendChild(a);\r\n    breadcrumb.appendChild(li);\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\nconst getParameterByName = (name, url) => {\r\n    if (!url)\r\n        url = window.location.href;\r\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n        results = regex.exec(url);\r\n    if (!results)\r\n        return null;\r\n    if (!results[2])\r\n        return '';\r\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}","/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\r\n    static get DATABASE_URL() {\r\n        const port = 1337 // Change this to your server port\r\n        return `http://localhost:${port}/restaurants`;\r\n    }\r\n\r\n    // create the idb\r\n    static InitIDB() {\r\n        this.dbPromise = idb.open('restaurants-reviews', 1, upgradeDB => {\r\n            switch (upgradeDB.oldVersion) {\r\n                case 0:\r\n                case 1:\r\n                    const restaurantStore = upgradeDB.createObjectStore('restaurants', {\r\n                        keyPath: 'id'\r\n                    });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all restaurants.\r\n     */\r\n    static fetchRestaurants(callback) {\r\n\r\n        DBHelper.fetchRestaurantsFromLocalDB().then((restaurants) => {\r\n            callback(null, restaurants);\r\n        });\r\n\r\n        let self = this;\r\n        let xhr = new XMLHttpRequest();\r\n        xhr.open('GET', DBHelper.DATABASE_URL);\r\n        xhr.onload = () => {\r\n            if (xhr.status === 200) { // Got a success response from server!\r\n                const restaurants = JSON.parse(xhr.responseText);\r\n                restaurants.map(function (restaurant) {\r\n                    self.dbPromise.then(function (db) {\r\n                        var tx = db.transaction('restaurants', 'readwrite');\r\n                        var restaurantStore = tx.objectStore('restaurants');\r\n                        return restaurantStore.put(restaurant);\r\n                    });\r\n                    return restaurant;\r\n                });\r\n                callback(null, restaurants);\r\n            } else { // Oops!. Got an error from server.\r\n                this.dbPromise.then(() => {\r\n                    return DBHelper.fetchRestaurantsFromLocalDB()\r\n                }).then(function (restaurants) {\r\n                    callback(null, restaurants);\r\n                }).catch(function () {\r\n                    const error = (`Request failed. Returned status of ${xhr.status}`);\r\n                    callback(error, null);\r\n                });\r\n            }\r\n        };\r\n        xhr.onerror = function () {\r\n            DBHelper.fetchRestaurantsFromLocalDB().then((restaurants) => {\r\n                callback(null, restaurants);\r\n            });\r\n        }\r\n        xhr.send();\r\n    }\r\n\r\n    /**\r\n     * Fetch all restaurants from local storage\r\n     */\r\n    static fetchRestaurantsFromLocalDB() {\r\n        return this.dbPromise.then(function (db) {\r\n            var tx = db.transaction('restaurants');\r\n            var restaurantsStore = tx.objectStore('restaurants');\r\n            return restaurantsStore.getAll();\r\n        })\r\n    }\r\n\r\n    static fetchRestaurantsFromLocalDB(id) {\r\n        return this.dbPromise.then(function (db) {\r\n            var tx = db.transaction('restaurants');\r\n            var restaurantsStore = tx.objectStore('restaurants');\r\n            return restaurantsStore.get(parseInt(id));\r\n        })\r\n    }\r\n\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     */\r\n    static fetchRestaurantById(id, callback) {\r\n        // fetch all restaurants with proper error handling.\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                const restaurant = restaurants.find(r => r.id == id);\r\n                if (restaurant) { // Got the restaurant\r\n                    callback(null, restaurant);\r\n                } else { // Restaurant does not exist in the database\r\n                    callback('Restaurant does not exist', null);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine type with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisine(cuisine, callback) {\r\n        // Fetch all restaurants  with proper error handling\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given cuisine type\r\n                const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given neighborhood\r\n                const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                let results = restaurants\r\n                if (cuisine != 'all') { // filter by cuisine\r\n                    results = results.filter(r => r.cuisine_type == cuisine);\r\n                }\r\n                if (neighborhood != 'all') { // filter by neighborhood\r\n                    results = results.filter(r => r.neighborhood == neighborhood);\r\n                }\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all neighborhoods with proper error handling.\r\n     */\r\n    static fetchNeighborhoods(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all neighborhoods from all restaurants\r\n                const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n                // Remove duplicates from neighborhoods\r\n                const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n                callback(null, uniqueNeighborhoods);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all cuisines with proper error handling.\r\n     */\r\n    static fetchCuisines(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all cuisines from all restaurants\r\n                const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n                // Remove duplicates from cuisines\r\n                const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n                callback(null, uniqueCuisines);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Restaurant page URL.\r\n     */\r\n    static urlForRestaurant(restaurant) {\r\n        return (`./restaurant.html?id=${restaurant.id}`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image URL.\r\n     */\r\n    static imageUrlForRestaurant(restaurant) {\r\n        // use id instead photograph to avoid an error with Casa Enrique (a bug?)\r\n        return (`/img/${restaurant.id}`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image description.\r\n     */\r\n    static imageDescriptionForRestaurant(restaurant) {\r\n        // Please note that I used Google Translate. Translations can be a little fun... \r\n        const altImg = [\r\n            \"Inside view of the Mission Chinese Food restaurant. Many people talk to each other\",\r\n            \"A pizza cut into six slices\",\r\n            \"Inside view of Kang Ho Dong Baekjeong restaurant. You can see various modern style tables and chairs\",\r\n            \"Panoramic photo of the entrance. You can see the two streets on which the restaurant overlooks\",\r\n            \"Inside view of the Roberto's Pizza. In the background, see the kitchen and some pizza makers\",\r\n            \"Inside view of the Hometown BBQ restaurant. On the wall a huge US flag\",\r\n            \"Two people walking around the restaurand. You can see some customers inside\",\r\n            \"Detail of the The Dutch banner\",\r\n            \"Inside view of the Mu Ramen restaurant. Some customers eat using the typical oriental chopsticks\",\r\n            \"Inside view of restaurant. You see the counter with the window and several bottles.\"\r\n        ];\r\n        return (altImg[restaurant.id - 1]);\r\n    }\r\n\r\n    /**\r\n     * Map marker for a restaurant.\r\n     */\r\n    static mapMarkerForRestaurant(restaurant, map) {\r\n        const marker = new google.maps.Marker({\r\n            position: restaurant.latlng,\r\n            title: restaurant.name,\r\n            url: DBHelper.urlForRestaurant(restaurant),\r\n            map: map,\r\n            animation: google.maps.Animation.DROP\r\n        });\r\n        return marker;\r\n    }\r\n}"]}