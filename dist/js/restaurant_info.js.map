{"version":3,"sources":["restaurant_info.js"],"names":["restaurant","map","navigator","window","addEventListener","serviceWorker","register","then","registration","console","log","scope","err","initMap","fetchRestaurantFromURL","error","self","google","maps","Map","document","getElementById","zoom","center","latlng","scrollwheel","fillBreadcrumb","DBHelper","mapMarkerForRestaurant","callback","id","getParameterByName","fetchRestaurantById","fillRestaurantHTML","innerHTML","name","address","image","className","alt","imageDescriptionForRestaurant","src","imageUrlForRestaurant","cuisine_type","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","createElement","day","appendChild","time","reviews","container","title","noReviews","ul","forEach","review","createReviewHTML","li","header","date","rating","comments","breadcrumb","a","href","urlForRestaurant","setAttribute","url","location","replace","results","RegExp","exec","decodeURIComponent"],"mappings":"AAAA,IAAIA,WACJ,IAAIC,IAMA,kBAAmBC,WACnBC,OAAOC,iBAAiB,OAAQ,WAC5BF,UAAUG,cAAcC,SAAS,UAAUC,KAAK,SAASC,GAErDC,QAAQC,IAAI,qDAAsDF,EAAaG,QAChF,SAASC,GAERH,QAAQC,IAAI,sCAAuCE,OAQ/DT,OAAOU,QAAU,MACbC,uBAAuB,CAACC,EAAOf,KACvBe,EACAN,QAAQM,MAAMA,IAEdC,KAAKf,IAAM,IAAIgB,OAAOC,KAAKC,IAAIC,SAASC,eAAe,QACnDC,KAAM,GACNC,OAAQvB,EAAWwB,OACnBC,aAAa,IAEjBC,iBACAC,SAASC,uBAAuBZ,KAAKhB,WAAYgB,KAAKf,UAQlEa,uBAAyB,CAACe,IACtB,GAAIb,KAAKhB,WAEL,YADA6B,EAAS,KAAMb,KAAKhB,YAGxB,MAAM8B,EAAKC,mBAAmB,MACzBD,EAIDH,SAASK,oBAAoBF,EAAI,CAACf,EAAOf,KACrCgB,KAAKhB,WAAaA,EACbA,GAILiC,qBACAJ,EAAS,KAAM7B,IAJXS,QAAQM,MAAMA,MANtBA,MAAQ,0BACRc,EAASd,MAAO,SAiBxBkB,mBAAqB,EAACjC,EAAagB,KAAKhB,cACvBoB,SAASC,eAAe,mBAChCa,UAAYlC,EAAWmC,KAEZf,SAASC,eAAe,sBAChCa,UAAYlC,EAAWoC,QAE/B,MAAMC,EAAQjB,SAASC,eAAe,kBACtCgB,EAAMC,UAAY,iBAClBD,EAAME,IAAMZ,SAASa,8BAA8BxC,GACnDqC,EAAMI,IAAMd,SAASe,sBAAsB1C,GAE3BoB,SAASC,eAAe,sBAChCa,UAAYlC,EAAW2C,aAG3B3C,EAAW4C,iBACXC,0BAGJC,oBAMJD,wBAA0B,EAACE,EAAiB/B,KAAKhB,WAAW4C,mBACxD,MAAMI,EAAQ5B,SAASC,eAAe,oBACtC,IAAK,IAAI4B,KAAOF,EAAgB,CAC5B,MAAMG,EAAM9B,SAAS+B,cAAc,MAE7BC,EAAMhC,SAAS+B,cAAc,MACnCC,EAAIlB,UAAYe,EAChBG,EAAId,UAAY,iBAChBY,EAAIG,YAAYD,GAEhB,MAAME,EAAOlC,SAAS+B,cAAc,MACpCG,EAAKpB,UAAYa,EAAeE,GAChCC,EAAIG,YAAYC,GAEhBN,EAAMK,YAAYH,MAO1BJ,gBAAkB,EAACS,EAAUvC,KAAKhB,WAAWuD,WACzC,MAAMC,EAAYpC,SAASC,eAAe,qBACpCoC,EAAQrC,SAAS+B,cAAc,MAIrC,GAHAM,EAAMvB,UAAY,UAClBsB,EAAUH,YAAYI,IAEjBF,EAAS,CACV,MAAMG,EAAYtC,SAAS+B,cAAc,KAGzC,OAFAO,EAAUxB,UAAY,uBACtBsB,EAAUH,YAAYK,GAG1B,MAAMC,EAAKvC,SAASC,eAAe,gBACnCkC,EAAQK,QAAQC,IACZF,EAAGN,YAAYS,iBAAiBD,MAEpCL,EAAUH,YAAYM,KAM1BG,iBAAmB,CAACD,IAChB,MAAME,EAAK3C,SAAS+B,cAAc,MAE5Ba,EAAS5C,SAAS+B,cAAc,OACtCa,EAAO1B,UAAY,iBACnB,MAAMH,EAAOf,SAAS+B,cAAc,KACpChB,EAAKD,UAAY2B,EAAO1B,KACxBA,EAAKG,UAAY,eACjB0B,EAAOX,YAAYlB,GAEnB,MAAM8B,EAAO7C,SAAS+B,cAAc,KACpCc,EAAK/B,UAAY2B,EAAOI,KACxBA,EAAK3B,UAAY,eACjB0B,EAAOX,YAAYY,GAEnBF,EAAGV,YAAYW,GAEf,MAAME,EAAS9C,SAAS+B,cAAc,KACtCe,EAAOhC,qBAAuB2B,EAAOK,SACrCA,EAAO5B,UAAY,iBACnByB,EAAGV,YAAYa,GAEf,MAAMC,EAAW/C,SAAS+B,cAAc,KAIxC,OAHAgB,EAASjC,UAAY2B,EAAOM,SAC5BJ,EAAGV,YAAYc,GAERJ,IAMXrC,eAAiB,EAAC1B,EAAagB,KAAKhB,cAChC,MAAMoE,EAAahD,SAASC,eAAe,cACrC0C,EAAK3C,SAAS+B,cAAc,MAC5BkB,EAAIjD,SAAS+B,cAAc,KACjCkB,EAAEC,KAAO3C,SAAS4C,iBAAiBvE,GACnCqE,EAAEnC,UAAYlC,EAAWmC,KACzBkC,EAAEG,aAAa,eAAgB,QAC/BT,EAAGV,YAAYgB,GACfD,EAAWf,YAAYU,KAM3BhC,mBAAqB,EAACI,EAAMsC,KACnBA,IACDA,EAAMtE,OAAOuE,SAASJ,MAC1BnC,EAAOA,EAAKwC,QAAQ,UAAW,QAC/B,MACIC,EADU,IAAIC,cAAc1C,sBACZ2C,KAAKL,GACzB,OAAKG,EAEAA,EAAQ,GAENG,mBAAmBH,EAAQ,GAAGD,QAAQ,MAAO,MADzC,GAFA","file":"restaurant_info.js","sourcesContent":["let restaurant;\r\nvar map;\r\n\r\n\r\n/**\r\n * checks to see if the service worker API is available, and if it is, the service worker at /sw.js is registered\r\n */\r\nif ('serviceWorker' in navigator) {\r\n    window.addEventListener('load', function() {\r\n        navigator.serviceWorker.register('/sw.js').then(function(registration) {\r\n            // Registration was successful\r\n            console.log('ServiceWorker registration successful with scope: ', registration.scope);\r\n        }, function(err) {\r\n            // registration failed :(\r\n            console.log('ServiceWorker registration failed: ', err);\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n    fetchRestaurantFromURL((error, restaurant) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            self.map = new google.maps.Map(document.getElementById('map'), {\r\n                zoom: 16,\r\n                center: restaurant.latlng,\r\n                scrollwheel: false\r\n            });\r\n            fillBreadcrumb();\r\n            DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nfetchRestaurantFromURL = (callback) => {\r\n    if (self.restaurant) { // restaurant already fetched!\r\n        callback(null, self.restaurant)\r\n        return;\r\n    }\r\n    const id = getParameterByName('id');\r\n    if (!id) { // no id found in URL\r\n        error = 'No restaurant id in URL'\r\n        callback(error, null);\r\n    } else {\r\n        DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n            self.restaurant = restaurant;\r\n            if (!restaurant) {\r\n                console.error(error);\r\n                return;\r\n            }\r\n            fillRestaurantHTML();\r\n            callback(null, restaurant)\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nfillRestaurantHTML = (restaurant = self.restaurant) => {\r\n    const name = document.getElementById('restaurant-name');\r\n    name.innerHTML = restaurant.name;\r\n\r\n    const address = document.getElementById('restaurant-address');\r\n    address.innerHTML = restaurant.address;\r\n\r\n    const image = document.getElementById('restaurant-img');\r\n    image.className = 'restaurant-img'\r\n    image.alt = DBHelper.imageDescriptionForRestaurant(restaurant);\r\n    image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n\r\n    const cuisine = document.getElementById('restaurant-cuisine');\r\n    cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n    // fill operating hours\r\n    if (restaurant.operating_hours) {\r\n        fillRestaurantHoursHTML();\r\n    }\r\n    // fill reviews\r\n    fillReviewsHTML();\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n    const hours = document.getElementById('restaurant-hours');\r\n    for (let key in operatingHours) {\r\n        const row = document.createElement('tr');\r\n\r\n        const day = document.createElement('td');\r\n        day.innerHTML = key;\r\n        day.className = \"restaurant-day\";\r\n        row.appendChild(day);\r\n\r\n        const time = document.createElement('td');\r\n        time.innerHTML = operatingHours[key];\r\n        row.appendChild(time);\r\n\r\n        hours.appendChild(row);\r\n    }\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\r\n    const container = document.getElementById('reviews-container');\r\n    const title = document.createElement('h2');\r\n    title.innerHTML = 'Reviews';\r\n    container.appendChild(title);\r\n\r\n    if (!reviews) {\r\n        const noReviews = document.createElement('p');\r\n        noReviews.innerHTML = 'No reviews yet!';\r\n        container.appendChild(noReviews);\r\n        return;\r\n    }\r\n    const ul = document.getElementById('reviews-list');\r\n    reviews.forEach(review => {\r\n        ul.appendChild(createReviewHTML(review));\r\n    });\r\n    container.appendChild(ul);\r\n}\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\ncreateReviewHTML = (review) => {\r\n    const li = document.createElement('li');\r\n\r\n    const header = document.createElement('div')\r\n    header.className = \"reviews-header\";\r\n    const name = document.createElement('p');\r\n    name.innerHTML = review.name;\r\n    name.className = \"reviews-name\";\r\n    header.appendChild(name);\r\n\r\n    const date = document.createElement('p');\r\n    date.innerHTML = review.date;\r\n    date.className = \"reviews-date\";\r\n    header.appendChild(date);\r\n\r\n    li.appendChild(header);\r\n\r\n    const rating = document.createElement('p');\r\n    rating.innerHTML = `Rating: ${review.rating}`;\r\n    rating.className = \"reviews-rating\";\r\n    li.appendChild(rating);\r\n\r\n    const comments = document.createElement('p');\r\n    comments.innerHTML = review.comments;\r\n    li.appendChild(comments);\r\n\r\n    return li;\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nfillBreadcrumb = (restaurant = self.restaurant) => {\r\n    const breadcrumb = document.getElementById('breadcrumb');\r\n    const li = document.createElement('li');\r\n    const a = document.createElement('a');\r\n    a.href = DBHelper.urlForRestaurant(restaurant);\r\n    a.innerHTML = restaurant.name;\r\n    a.setAttribute(\"aria-current\", \"page\");\r\n    li.appendChild(a);\r\n    breadcrumb.appendChild(li);\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\ngetParameterByName = (name, url) => {\r\n    if (!url)\r\n        url = window.location.href;\r\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n        results = regex.exec(url);\r\n    if (!results)\r\n        return null;\r\n    if (!results[2])\r\n        return '';\r\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}"]}