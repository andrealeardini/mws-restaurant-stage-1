{"version":3,"sources":["restaurant_info.js"],"names":["map","restaurant","navigator","window","addEventListener","register","then","registration","console","log","scope","err","initMap","error","fetchRestaurantFromURL","maps","Map","document","getElementById","zoom","self","scrollwheel","DBHelper","mapMarkerForRestaurant","callback","id","fetchRestaurantById","fillRestaurantHTML","getParameterByName","arguments","length","undefined","innerHTML","name","address","image","alt","imageDescriptionForRestaurant","fillRestaurantHoursHTML","fillReviewsHTML","hours","key","operatingHours","row","createElement","day","appendChild","time","reviews","title","container","noReviews","review","ul","createReviewHTML","forEach","header","className","date","li","rating","comments","fillBreadcrumb","a","href","urlForRestaurant","setAttribute","breadcrumb","replace","RegExp","exec","url","results","decodeURIComponent"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["let restaurant;\r\nvar map;\r\n\r\n\r\n/**\r\n * checks to see if the service worker API is available, and if it is, the service worker at /sw.js is registered\r\n */\r\nif ('serviceWorker' in navigator) {\r\n    window.addEventListener('load', function() {\r\n        navigator.serviceWorker.register('/sw.js').then(function(registration) {\r\n            // Registration was successful\r\n            console.log('ServiceWorker registration successful with scope: ', registration.scope);\r\n        }, function(err) {\r\n            // registration failed :(\r\n            console.log('ServiceWorker registration failed: ', err);\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n    fetchRestaurantFromURL((error, restaurant) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            self.map = new google.maps.Map(document.getElementById('map'), {\r\n                zoom: 16,\r\n                center: restaurant.latlng,\r\n                scrollwheel: false\r\n            });\r\n            fillBreadcrumb();\r\n            DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nfetchRestaurantFromURL = (callback) => {\r\n    if (self.restaurant) { // restaurant already fetched!\r\n        callback(null, self.restaurant)\r\n        return;\r\n    }\r\n    const id = getParameterByName('id');\r\n    if (!id) { // no id found in URL\r\n        error = 'No restaurant id in URL'\r\n        callback(error, null);\r\n    } else {\r\n        DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n            self.restaurant = restaurant;\r\n            if (!restaurant) {\r\n                console.error(error);\r\n                return;\r\n            }\r\n            fillRestaurantHTML();\r\n            callback(null, restaurant)\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nfillRestaurantHTML = (restaurant = self.restaurant) => {\r\n    const name = document.getElementById('restaurant-name');\r\n    name.innerHTML = restaurant.name;\r\n\r\n    const address = document.getElementById('restaurant-address');\r\n    address.innerHTML = restaurant.address;\r\n\r\n    const image = document.getElementById('restaurant-img');\r\n    image.className = 'restaurant-img'\r\n    image.alt = DBHelper.imageDescriptionForRestaurant(restaurant);\r\n    image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n\r\n    const cuisine = document.getElementById('restaurant-cuisine');\r\n    cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n    // fill operating hours\r\n    if (restaurant.operating_hours) {\r\n        fillRestaurantHoursHTML();\r\n    }\r\n    // fill reviews\r\n    fillReviewsHTML();\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n    const hours = document.getElementById('restaurant-hours');\r\n    for (let key in operatingHours) {\r\n        const row = document.createElement('tr');\r\n\r\n        const day = document.createElement('td');\r\n        day.innerHTML = key;\r\n        day.className = \"restaurant-day\";\r\n        row.appendChild(day);\r\n\r\n        const time = document.createElement('td');\r\n        time.innerHTML = operatingHours[key];\r\n        row.appendChild(time);\r\n\r\n        hours.appendChild(row);\r\n    }\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\r\n    const container = document.getElementById('reviews-container');\r\n    const title = document.createElement('h2');\r\n    title.innerHTML = 'Reviews';\r\n    container.appendChild(title);\r\n\r\n    if (!reviews) {\r\n        const noReviews = document.createElement('p');\r\n        noReviews.innerHTML = 'No reviews yet!';\r\n        container.appendChild(noReviews);\r\n        return;\r\n    }\r\n    const ul = document.getElementById('reviews-list');\r\n    reviews.forEach(review => {\r\n        ul.appendChild(createReviewHTML(review));\r\n    });\r\n    container.appendChild(ul);\r\n}\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\ncreateReviewHTML = (review) => {\r\n    const li = document.createElement('li');\r\n\r\n    const header = document.createElement('div')\r\n    header.className = \"reviews-header\";\r\n    const name = document.createElement('p');\r\n    name.innerHTML = review.name;\r\n    name.className = \"reviews-name\";\r\n    header.appendChild(name);\r\n\r\n    const date = document.createElement('p');\r\n    date.innerHTML = review.date;\r\n    date.className = \"reviews-date\";\r\n    header.appendChild(date);\r\n\r\n    li.appendChild(header);\r\n\r\n    const rating = document.createElement('p');\r\n    rating.innerHTML = `Rating: ${review.rating}`;\r\n    rating.className = \"reviews-rating\";\r\n    li.appendChild(rating);\r\n\r\n    const comments = document.createElement('p');\r\n    comments.innerHTML = review.comments;\r\n    li.appendChild(comments);\r\n\r\n    return li;\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nfillBreadcrumb = (restaurant = self.restaurant) => {\r\n    const breadcrumb = document.getElementById('breadcrumb');\r\n    const li = document.createElement('li');\r\n    const a = document.createElement('a');\r\n    a.href = DBHelper.urlForRestaurant(restaurant);\r\n    a.innerHTML = restaurant.name;\r\n    a.setAttribute(\"aria-current\", \"page\");\r\n    li.appendChild(a);\r\n    breadcrumb.appendChild(li);\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\ngetParameterByName = (name, url) => {\r\n    if (!url)\r\n        url = window.location.href;\r\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n        results = regex.exec(url);\r\n    if (!results)\r\n        return null;\r\n    if (!results[2])\r\n        return '';\r\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}"]}